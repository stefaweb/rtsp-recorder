#!/bin/bash
#
# recorder -- Wrapper to pull remote audio stream and convert contents to mp3
# To be used with Axis P8221, AXIS C8110 soundbox or any RTSP device with sound output
#
# v3.1.2b1
# Date: 7/03/2024
# Copyright (C) 2024 by Stef

# Usage: ./recorder
# usage: ./recorder -f recorder.conf
#
# Needed binary: vlc, sox, id3v2, libsox-fmt-mp3
# For multimeida packages use this repository: https://www.deb-multimedia.org

# Function to send an error message.
send_error_email() {
	EMAIL_SUBJECT_ERROR_FILE="${DIR_TEMPLATE}/email_subject_error.${LANG}"
	if [ -f "$EMAIL_SUBJECT_ERROR_FILE" ]; then
		# Read the subject from the file and replace {{PREFIX}} with the actual value of $PREFIX
		EMAIL_SUBJECT_ERROR=$(sed "s|{{PREFIX}}|$PREFIX|g" "$EMAIL_SUBJECT_ERROR_FILE")
	else
		log_message "Error: The error email subject file ${EMAIL_SUBJECT_ERROR_FILE} is not found."
		# Use a default subject in case of error reading the fil
		EMAIL_SUBJECT_ERROR="Error with the recorder script for $PREFIX."
	fi

	EMAIL_BODY_ERROR_PATH="${DIR_TEMPLATE}/email_body_error.${LANG}"
	if [ -f "$EMAIL_BODY_ERROR_PATH" ]; then
		EMAIL_BODY_ERROR=$(<"$EMAIL_BODY_ERROR_PATH")
		echo "$EMAIL_BODY_ERROR" | mail -s "$EMAIL_SUBJECT_ERROR" -a "From: $EMAIL_FROM" -a "Content-Type: text/plain; charset=\"UTF-8\"" "$EMAIL_TO_SUPPORT"
		log_message "Error email sent to ${EMAIL_TO_SUPPORT} from ${EMAIL_FROM} with the subject '${EMAIL_SUBJECT_ERROR}' and the body from ${EMAIL_BODY_ERROR_PATH}"
	else
		log_message "Error: The error email body file ${EMAIL_BODY_ERROR_PATH} is not found."
	fi
}

# Function to send a message when a file contains sound.
send_file_email() {
	EMAIL_SUBJECT_FILE_PATH="${DIR_TEMPLATE}/email_subject_file.${LANG}"
	if [ -f "$EMAIL_SUBJECT_FILE_PATH" ]; then
		# Read the subject from the file and replace {{PREFIX}} with the actual value of $PREFIX.
		EMAIL_SUBJECT_FILE=$(sed "s|{{PREFIX}}|$PREFIX|g" "$EMAIL_SUBJECT_FILE_PATH")
	else
		log_message "Error: The email subject file ${EMAIL_SUBJECT_FILE_PATH} is not found."
		# Use a default subject in case of error reading the file.
		EMAIL_SUBJECT_FILE="SOUND ALERT: Sounds at $PREFIX"
	fi

	# Load body file path values
	EMAIL_BODY_FILE_PATH="${DIR_TEMPLATE}/email_body_file.${LANG}"

	# Load minute localized values
	MINUTES_FILE_PATH="${DIR_TEMPLATE}/minutes.${LANG}"

	if [ -f "$MINUTES_FILE_PATH" ]; then
		# Read the minutes localization from the file.
		minutes_loc=$(<"$MINUTES_FILE_PATH")
	else
		log_message "Error: The minutes file ${MINUTES_FILE_PATH} is not found."
		# Use a default minutes localization in case of error reading the file.
		minutes_loc="minutes(s)"
	fi

	# Load second localized values
	SECONDS_FILE_PATH="${DIR_TEMPLATE}/seconds.${LANG}"

	if [ -f "$SECONDS_FILE_PATH" ]; then
		# Read the seconds localization from the file.
		seconds_loc=$(<"$SECONDS_FILE_PATH")
	else
		log_message "Error: The seconds file ${SECONDS_FILE_PATH} is not found."
		# Use a default seconds localization in case of error reading the file.
		seconds_loc="second(s)"
	fi

	if [ -f "$EMAIL_BODY_FILE_PATH" ]; then
		FILE_LENGTH_SHORT=$(printf "%.2f" $FILE_LENGTH)
		# Convert to minutes and seconds if it's greater than or equal to 60 seconds
		if (( $(echo "$FILE_LENGTH_SHORT >= 60" | bc -l) )); then
		    minutes=$(echo "$FILE_LENGTH_SHORT / 60" | bc)
		    seconds=$(echo "$FILE_LENGTH_SHORT - ($minutes * 60)" | bc)
		    # Directly format seconds to an integer, removing any decimal part
		    seconds_formatted=$(printf "%.0f" $seconds)
		    SOUND_LENGTH="${minutes} $minutes_loc $seconds_formatted $seconds_loc"
		else
		    # For values less than 60 seconds, directly show the original length as an integer
		    SOUND_LENGTH=$(printf "%.0f" $FILE_LENGTH_SHORT)" $seconds_loc"
		fi

		URL_LOGIN=$(echo "$RTSP_URL" | sed "s|rtsp://|&$RTSP_USER:$RTSP_PASSWORD@|")
		FILE_NAME_WITHOUT_ORIGINAL="${FILE_NAME%_original.mp3}"
		NEW_FILE_NAME="${FILE_NAME_WITHOUT_ORIGINAL}.mp3"
		DOWNLOAD_LINK="${URL_SERVER}/${NEW_FILE_NAME}"
		AMPLITUDE_ADJUSTMENT_SHORT=$(printf "%.3f" $AMPLITUDE_ADJUSTMENT)
		EMAIL_BODY_FILE=$(sed -e "s|{{AMPLITUDE_ADJUSTMENT}}|$AMPLITUDE_ADJUSTMENT_SHORT|g" \
					-e "s|{{SOUND_LENGTH}}|$SOUND_LENGTH|g" \
					-e "s|{{PREFIX}}|$PREFIX|g" \
					-e "s|{{INPUT_THRESHOLD}}|$INPUT_THRESHOLD|g" \
					-e "s|{{DOWNLOAD_LINK}}|$DOWNLOAD_LINK|g" \
					-e "s|{{URL_SERVER}}|$URL_SERVER|g" \
					-e "s|{{URL_LOGIN}}|$URL_LOGIN|g" "$EMAIL_BODY_FILE_PATH")

		echo "$EMAIL_BODY_FILE" | mail -s "$EMAIL_SUBJECT_FILE" -a "From: $EMAIL_FROM" -a "Content-Type: text/plain; charset=\"UTF-8\"" "$EMAIL_TO"
		log_message "Notification email sent to ${EMAIL_TO} from ${EMAIL_FROM} with the subject '${EMAIL_SUBJECT_FILE}'"
	else
		log_message "Error: The email body file ${EMAIL_BODY_FILE_PATH} is not found."
	fi
}

# Function to log messages.
log_message() {
	echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOGFILE"
}

# Check for dependencies.
check_dependencies() {
	local deps=("cvlc" "sox" "id3v2")
	for cmd in "${deps[@]}"; do
		if ! command -v $cmd &> /dev/null; then
			log_message "Error: $cmd is not installed."
			exit 1
		fi
	done
}

# Record the audio stream.
record_audio() {
	xgd_string=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
	XDG_RUNTIME_DIR="/tmp/recorder-$xgd_string"
	local attempt_count=0
	local MAX_ATTEMPTS=3

	while [ $attempt_count -lt $MAX_ATTEMPTS ]; do
		cvlc -q $RTSP_URL --rtsp-user=$RTSP_USER --rtsp-pwd=$RTSP_PASSWORD --run-time $DURATION \
				--sout "#transcode{acodec=mp3,ab="$RTSP_BITE_RATE",samplerate="$RTSP_SAMPLE_RATE",channels=1}:std{access=file,mux=raw,dst=${OUTPUT_PATH}}" \
				--rtp-timeout=10 --sap-timeout=10 vlc://quit >> "$LOGFILE" 2>&1

		if [ -f "$OUTPUT_PATH" ]; then
			log_message "Recording completed successfully: ${OUTPUT_PATH}"
			break
		else
			log_message "Error: Recording failed. Attempting retry."
			((attempt_count++))
			sleep 10
		fi
	done

	if [ $attempt_count -eq $MAX_ATTEMPTS ]; then
		log_message "Maximum number of retries reached without success. Ending script."
		send_error_email
		exit 1
	fi
	rm -fR "$XDG_RUNTIME_DIR"
}

# Main script starts here.
main() {
	# Check if the script is run as root
	if [ "$(id -u)" -eq 0 ]; then
		echo "This script should not be run as root." >&2
		exit 1
	fi

	# Initialization of parameters.
	CONFIG_FILE="/etc/recorder.conf"

	while getopts "f:" opt; do
		case $opt in
		f) CONFIG_FILE="$OPTARG";;
		\?) echo "Usage: cmd [-f recorder.conf]"
		exit 1;;
		esac
	done

	if [ -z "$CONFIG_FILE" ]; then
		echo "No configuration file specified. By default, the file should be located in /etc/recorder.conf."
	else
		if [ ! -f "$CONFIG_FILE" ]; then
			echo "The specified configuration file ($CONFIG_FILE) is not found."
		exit 1
		fi
		source "$CONFIG_FILE"
	fi

	# Initialization of local parameters.
	FILE_NAME="${PREFIX}_$(date +%Y-%m-%d_%H-%M)_original.mp3"
	OUTPUT_PATH="${DIR_WEB}/${FILE_NAME}"
	PIDFILE="${DIR_PID}/recorder-${PREFIX}.pid"
	LOGFILE="${DIR_LOG}/recorder-${PREFIX}.log"

	echo $$ > "$PIDFILE"
	check_dependencies
	[ ! -d "$DIR_WEB" ] && mkdir -p "$DIR_WEB"
	log_message "#### Start of the recorder script for PID number $$ ####"
	log_message "Start of audio stream recording for ${PREFIX}."
	record_audio

	# Analyze the audio file with sox and extract the Volume adjustment information.
	VOLUME_ADJUSTMENT=$(sox ${OUTPUT_PATH} -n stat 2>&1 | grep 'Volume adjustment' | cut -d ':' -f 2 | tr -d ' ')
	log_message "Capturing Volume adjustment for ${PREFIX}: ${VOLUME_ADJUSTMENT}"

	# Analyze the audio file with sox and extract the Maximum amplitude information.
	AMPLITUDE_ADJUSTMENT=$(sox ${OUTPUT_PATH} -n stat 2>&1 | grep 'Maximum amplitude' | cut -d ':' -f 2 | tr -d ' ')
	log_message "Capturing Maximum amplitude for ${PREFIX}: ${AMPLITUDE_ADJUSTMENT}"

	# Analyze the audio file with sox and extract the file lengh information.
	FILE_LENGTH=$(sox ${OUTPUT_PATH} -n stat 2>&1 | grep 'Length' | cut -d ':' -f 2 | tr -d ' ')
	log_message "Capturing file duration: ${FILE_LENGTH}"

	# Using id3v2 to set the Artist with the prefix.
	ID3V2_CMD_OUTPUT=$(/usr/bin/id3v2 -a "$PREFIX" $OUTPUT_PATH 2>&1)
	log_message "Registering Device: ${PREFIX}"

	# Using id3v2 to set the Album with the Maximum amplitude.
	ID3V2_CMD_OUTPUT=$(/usr/bin/id3v2 -A "$AMPLITUDE_ADJUSTMENT" $OUTPUT_PATH 2>&1)
	log_message "Registering Maximum amplitude for ${PREFIX}: ${AMPLITUDE_ADJUSTMENT}"

	# Using id3v2 to set the Track with the Volume ajustement.
	ID3V2_VOLUME_CMD_OUTPUT=$(/usr/bin/id3v2 -T "$VOLUME_ADJUSTMENT" $OUTPUT_PATH 2>&1)
	log_message "Registering Volume adjustment for ${PREFIX}: ${VOLUME_ADJUSTMENT}"

	# Delete the file if $AMPLITUDE_ADJUSTMENT is smaller than $INPUT_THRESHOLD.
	if (( $(echo "$AMPLITUDE_ADJUSTMENT < $INPUT_THRESHOLD" | bc -l) )); then
		# Delete the file if $AMPLITUDE_ADJUSTMENT is smaller than $INPUT_THRESHOLD.
		log_message "The adjustment volume ${AMPLITUDE_ADJUSTMENT} is below the threshold ${INPUT_THRESHOLD}. Deleting file ${FILE_NAME}"
		rm "$OUTPUT_PATH"
		log_message "Original sound file deleted: $OUTPUT_PATH"
	else
		if [ "$REMOVE_SILENCE" = true ]; then
			# Use sox to remove silences.
			# Silence parameters should be adjusted according to your needs.
			PROCESSED_FILE_NAME="${OUTPUT_PATH%_original.mp3}"
			PROCESSED_OUTPUT_PATH="${PROCESSED_FILE_NAME}_silence.mp3"
			SOX_CMD_RUN="sox \"$OUTPUT_PATH\" \"$PROCESSED_OUTPUT_PATH\" $SOX_CMD"
			log_message "Executing sox command to remove silences: $SOX_CMD_RUN"

			# Execute the sox command.
			eval $SOX_CMD_RUN

			# Check if the sox command succeeded and if the processed file exists.
			if [ $? -eq 0 ] && [ -f "$PROCESSED_OUTPUT_PATH" ]; then
				log_message "Silence removal processing completed successfully. The processed file is: ${PROCESSED_FILE_NAME}"

				# Renames the file by removing "_original" from its name.
				PROCESSED_OUTPUT_PATH_WITHOUT_EXT="${PROCESSED_OUTPUT_PATH%_silence.mp3}"
				NEW_PROCESSED_OUTPUT_PATH="${PROCESSED_OUTPUT_PATH_WITHOUT_EXT}.mp3"
				mv "$PROCESSED_OUTPUT_PATH" "$NEW_PROCESSED_OUTPUT_PATH"

				# Using id3v2 to set the Artist with the prefix (processed).
				ID3V2_CMD_OUTPUT=$(/usr/bin/id3v2 -a "$PREFIX" $NEW_PROCESSED_OUTPUT_PATH 2>&1)
				log_message "Registering Device (processed): ${PREFIX}"

				# Using id3v2 to set the Track with the Volume ajustement.
				ID3V2_VOLUME_CMD_OUTPUT=$(/usr/bin/id3v2 -T "$VOLUME_ADJUSTMENT" $NEW_PROCESSED_OUTPUT_PATH 2>&1)
				log_message "Registering Volume adjustment for ${PREFIX} (processed): ${VOLUME_ADJUSTMENT}"

				# Analyze the audio file with sox and extract the file lengh information.
				FILE_LENGTH=$(sox ${NEW_PROCESSED_OUTPUT_PATH} -n stat 2>&1 | grep 'Length' | cut -d ':' -f 2 | tr -d ' ')
				log_message "Capturing file duration (processed): ${FILE_LENGTH}"

				if [ "$DELETE_ORIGINAL" = true ]; then
					rm "$OUTPUT_PATH"
					log_message "Original sound file deleted: $OUTPUT_PATH"
				else
					log_message "Deletion of the original sound file is disabled in the configuration."
				fi

				log_message "The adjustment volume ${AMPLITUDE_ADJUSTMENT} is less than or equal to the threshold ${INPUT_THRESHOLD}. The file has been renamed to ${NEW_PROCESSED_OUTPUT_PATH}."

				if (( $(echo "$FILE_LENGTH <= $SILENT_SOUND_DURATION" | bc -l) )); then
					log_message "The file lenght $FILE_LENGTH is less than or equal than $SILENT_SOUND_DURATION. Sound file $NEW_PROCESSED_OUTPUT_PATH deleted."
					rm "$NEW_PROCESSED_OUTPUT_PATH"

				else
					log_message "The file lenght $FILE_LENGTH is larger than $SILENT_SOUND_DURATION. The file $NEW_PROCESSED_OUTPUT_PATH is preserved."
					# Send email notification.
					send_file_email
				fi
			else
				send_error_email
				rm "$PROCESSED_OUTPUT_PATH"
				if [ "$DELETE_ORIGINAL" = true ]; then
					rm "$OUTPUT_PATH"
					log_message "Original sound file deleted: $OUTPUT_PATH"
				else
					log_message "Deletion of the original sound file is disabled in the configuration."
				fi
			fi
		else
			log_message "Silence removal is disabled. No silence processing will be performed."

			# Remove "_original" from the file.
			OUTPUT_PATH_WITHOUT_EXT="${OUTPUT_PATH%_original.mp3}"
			NEW_OUTPUT_PATH="${OUTPUT_PATH_WITHOUT_EXT}.mp3"
			mv "$OUTPUT_PATH" "$NEW_OUTPUT_PATH"
			log_message "File renamed to indicate no silence has been removed: ${NEW_OUTPUT_PATH}"

			# Send email notification.
			send_file_email
		fi
	fi

	# Read the PID from the PIDFILE, if it exists
	if [ -f "$PIDFILE" ]; then
		read -r PIDFILE_ID < "$PIDFILE"
	else
		log_message "The PID file ($PIDFILE) does not exist or is inaccessible."
		PIDFILE_ID=""
	fi

	# Check if the read PID is the same as the currently executing script's PID ($$)
	# Allows to do not destroy the PID file if another instance has already started while the current process is not yet finished.
	if [ "$PIDFILE_ID" = "$$" ]; then
		rm -f "$PIDFILE"
		log_message "PID file deleted ($$): $PIDFILE"
	else
    	log_message "Warning: The script's PID ($$) does not match the PID read ($PIDFILE_ID) in $PIDFILE. Deletion of the PID file cancelled."
	fi
}

# Execute the main function.
main "$@"